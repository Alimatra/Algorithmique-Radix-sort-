---
title: "Projet Algorithmique"
author: "Alimatou Traore"
date: "2024-03-28"
output: html_document
---



```{r}
countingSortAlgo <- function(arr, position) {
  n <- length(arr)
  result <- numeric(n)
  count <- numeric(10) # Initialise le vecteur de comptage avec des zéros
  
  # Compter les occurrences de chaque chiffre
  for(j in 1:n) {
    element <- arr[j] %/% position
    print( arr[j])
    count[element %% 10 + 1] <- count[element %% 10 + 1] + 1
    #print(element %% 10 + 1)
    print(count)
  }
  print(count)
  # Comptage cumulatif
  for(j in 2:10) {
    count[j] <- count[j] + count[j - 1]
    print(count)
  }
  
  # Placer les éléments dans l'ordre trié
  for(i in n:1) {
    element <- arr[i] %/% position
    result[count[element %% 10 + 1]] <- arr[i]
    count[element %% 10 + 1] <- count[element %% 10 + 1] - 1
    print("result")
    print(result)
    print("count")
    print(count)
  }
  
  # Copier les éléments triés dans le tableau original
  for(j in 1:n) {
    arr[j] <- result[j]
  }
  
  arr
}

```



```{r}
radixSortAlgo <- function(arr) {
  maximum <- max(arr) # chiffre max dans le vecteur
  position <- 1
  
  while(maximum %/% position > 0) { # on se déplace en fonction du max 
    arr <- countingSortAlgo(arr, position)
    print(arr)
    position <- position * 10
  }
  
  arr
}

```



```{r}
input <- c(20,1,21,100)
sorted_input <- radixSortAlgo(input)
print(sorted_input)

```



```{r}
input <- c(16, 63, 835, 5, 48)
sorted_input <- radixSortAlgo(input)
print(sorted_input)
```



```{r}
bubbleSort <- function(arr) {
  n <- length(arr)
  for (i in 1:(n-1)) {
    for (j in 1:(n-i)) {
      if (arr[j] > arr[j+1]) {
        # Swap
        temp <- arr[j]
        arr[j] <- arr[j+1]
        arr[j+1] <- temp
      }
    }
  }
  arr
}

```


```{r}
bubbleSort(input)
```


```{r}
# Generate a random array of integers
set.seed(123) # For reproducibility
random_array <- sample(1:1000, size = 10000, replace = TRUE)

# Measure time for Radix Sort
radix_time <- system.time({
  sorted_radix <- radixSortAlgo(random_array)
})

# Measure time for Bubble Sort
bubble_time <- system.time({
  sorted_bubble <- bubbleSort(random_array)
})

# Print the times
print(paste("Radix Sort time:", radix_time["elapsed"], "seconds"))
print(paste("Bubble Sort time:", bubble_time["elapsed"], "seconds"))

```



```{r}
library(ggplot2)

# Prepare the dataset sizes and storage for timings
sizes <- seq(10, 200, by = 10)
radix_times <- numeric(length(sizes))
bubble_times <- numeric(length(sizes))

# Measure the sorting times
for (i in seq_along(sizes)) {
  set.seed(123)
  random_array <- sample(1:1000, size = sizes[i], replace = TRUE)
  
  # Time Radix Sort
  start_time <- Sys.time()
  sorted_radix <- radixSortAlgo(random_array)
  end_time <- Sys.time()
  radix_times[i] <- end_time - start_time
  
  # Time Bubble Sort
  start_time <- Sys.time()
  sorted_bubble <- bubbleSort(random_array)
  end_time <- Sys.time()
  bubble_times[i] <- end_time - start_time
}

# Prepare the data for plotting
plot_data <- data.frame(Size = rep(sizes, 2),
                        Time = c(radix_times, bubble_times),
                        Algorithm = rep(c("Radix Sort", "Bubble Sort"), each = length(sizes)))

# Plot
ggplot(plot_data, aes(x = Size, y = Time, color = Algorithm)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(title = "Comparison of Sorting Algorithm Performance",
       x = "Array Size",
       y = "Time (seconds)",
       color = "Algorithm")

```



